I""
<blockquote>
  <p><strong>Note</strong> The minimum agent version supported by this feature is microsoft/oms:ciprod07092019 or later.</p>
</blockquote>

<ol>
  <li>Run an demo application called “prommetrics-demo” which already has the Prometheus endpoint exposed.
Save the YAML below as <code class="language-plaintext highlighter-rouge">prommetrics-demo.yaml</code> or download it from <a href="yaml-solutions/01. challenge-03/prommetrics-demo.yaml">prommetrics-demo.yaml</a></li>
</ol>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="na">apiVersion</span><span class="pi">:</span> <span class="s">v1</span>
  <span class="na">kind</span><span class="pi">:</span> <span class="s">Service</span>
  <span class="na">metadata</span><span class="pi">:</span>
    <span class="na">name</span><span class="pi">:</span> <span class="s">prommetrics-demo</span>
    <span class="na">labels</span><span class="pi">:</span>
      <span class="na">app</span><span class="pi">:</span> <span class="s">prommetrics-demo</span>
  <span class="na">spec</span><span class="pi">:</span>
    <span class="na">selector</span><span class="pi">:</span>
      <span class="na">app</span><span class="pi">:</span> <span class="s">prommetrics-demo</span>
    <span class="na">ports</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">metrics</span>
      <span class="na">port</span><span class="pi">:</span> <span class="m">8000</span>
      <span class="na">protocol</span><span class="pi">:</span> <span class="s">TCP</span>
      <span class="na">targetPort</span><span class="pi">:</span> <span class="m">8000</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">http</span>
      <span class="na">port</span><span class="pi">:</span> <span class="m">8080</span>
      <span class="na">protocol</span><span class="pi">:</span> <span class="s">TCP</span>
      <span class="na">targetPort</span><span class="pi">:</span> <span class="m">8080</span>
    <span class="na">type</span><span class="pi">:</span> <span class="s">ClusterIP</span>
  <span class="s">---</span>
  <span class="na">apiVersion</span><span class="pi">:</span> <span class="s">apps/v1</span>
  <span class="na">kind</span><span class="pi">:</span> <span class="s">Deployment</span>
  <span class="na">metadata</span><span class="pi">:</span>
    <span class="na">name</span><span class="pi">:</span> <span class="s">prommetrics-demo</span>
    <span class="na">labels</span><span class="pi">:</span>
      <span class="na">app</span><span class="pi">:</span> <span class="s">prommetrics-demo</span>
  <span class="na">spec</span><span class="pi">:</span>
    <span class="na">replicas</span><span class="pi">:</span> <span class="m">4</span>
    <span class="na">selector</span><span class="pi">:</span>
      <span class="na">matchLabels</span><span class="pi">:</span>
        <span class="na">app</span><span class="pi">:</span> <span class="s">prommetrics-demo</span>
    <span class="na">template</span><span class="pi">:</span>
      <span class="na">metadata</span><span class="pi">:</span>
        <span class="na">annotations</span><span class="pi">:</span>
          <span class="s">prometheus.io/scrape</span><span class="pi">:</span> <span class="s2">"</span><span class="s">true"</span>
          <span class="s">prometheus.io/path</span><span class="pi">:</span> <span class="s2">"</span><span class="s">/"</span>
          <span class="s">prometheus.io/port</span><span class="pi">:</span> <span class="s2">"</span><span class="s">8000"</span>
        <span class="na">labels</span><span class="pi">:</span>
          <span class="na">app</span><span class="pi">:</span> <span class="s">prommetrics-demo</span>
      <span class="na">spec</span><span class="pi">:</span>
        <span class="na">containers</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">prommetrics-demo</span>
          <span class="na">image</span><span class="pi">:</span> <span class="s">vishiy/tools:prommetricsv5</span>
          <span class="na">imagePullPolicy</span><span class="pi">:</span> <span class="s">Always</span>
          <span class="na">ports</span><span class="pi">:</span>
          <span class="pi">-</span> <span class="na">containerPort</span><span class="pi">:</span> <span class="m">8000</span>
          <span class="pi">-</span> <span class="na">containerPort</span><span class="pi">:</span> <span class="m">8080</span>
</code></pre></div></div>
<p>And deploy it using</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  kubectl apply <span class="nt">-f</span> prommetrics-demo.yaml
</code></pre></div></div>
<p>This application on purpose generates <em>“Bad Request 500”</em> when traffic is generated and it exposes a Prometheus metric called <strong>prommetrics_demo_requests_counter_total.</strong></p>

<ol>
  <li>Generate traffic to the application by running curl.</li>
</ol>

<p>Find the pods you just created.</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  kubectl get pods | <span class="nb">grep </span>prommetrics-demo

  prommetrics-demo-7f455766c4-gmpjb   1/1       Running   0          2m
  prommetrics-demo-7f455766c4-n7554   1/1       Running   0          2m
  prommetrics-demo-7f455766c4-q756r   1/1       Running   0          2m
  prommetrics-demo-7f455766c4-vqncw   1/1       Running   0          2m
</code></pre></div></div>
<p>Select one of the pods and login.</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  kubectl <span class="nb">exec</span> <span class="nt">-it</span> prommetrics-demo-7f455766c4-gmpjb bash
</code></pre></div></div>

<p>While logged on, execute curl to generate traffic.</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="k">while</span> <span class="o">(</span><span class="nb">true</span><span class="o">)</span><span class="p">;</span> <span class="k">do </span>curl <span class="s1">'http://prommetrics-demo.default.svc.cluster.local:8080'</span><span class="p">;</span> <span class="nb">sleep </span>5<span class="p">;</span> <span class="k">done</span> 
</code></pre></div></div>

<blockquote>
  <p><strong>Note</strong> Leave the window open and keep running this. You will see <strong>“Internal Server Error”</strong> but do not close the window.</p>
</blockquote>

<ol>
  <li>Download the configmap template yaml file and apply to start scraping the metrics.</li>
</ol>

<p>This configmap is pre-configured to scrape the application pods and collect Prometheus metric <strong>“prommetrics_demo_requests_counter_total”</strong> from the demo application in 1min interval.</p>

<p>Download configmap from <a href="yaml-solutions/01. challenge-03/configmap.yaml">configmap.yaml</a></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  interval = "1m"
  fieldpass = ["prommetrics_demo_requests_counter_total"]
  monitor_kubernetes_pods = true
</code></pre></div></div>
<p>And deploy it using</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  kubectl apply <span class="nt">-f</span> configmap.yaml
</code></pre></div></div>

<ol>
  <li>Query the Prometheus metrics and plot a chart.</li>
</ol>

<p>To access Log Analytics, go to the overview page for your AKS cluster and click <code class="language-plaintext highlighter-rouge">Logs</code> in the list of options on the left hand side under Monitor.</p>

<p>Copy the query below and run.</p>

<blockquote>
  <p><strong>Note</strong> It can take several minutes for the log data to appear in Log Analytics. If you see “NO RESULTS FOUND”, maybe try the next exercise and return later to view the data.</p>
</blockquote>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  InsightsMetrics
  | where Name == "prommetrics_demo_requests_counter_total"
  | extend dimensions=parse_json(Tags)
  | extend request_status = tostring(dimensions.request_status)
  | where request_status == "bad"
  | project request_status, Val, TimeGenerated | render timechart
</code></pre></div></div>
<p>You should be able to plot a chart based on the Prometheus metrics collected.</p>

<p><img src="media/prommetric.png" alt="Azure Monitor for Containers: Prometheus" /></p>

:ET