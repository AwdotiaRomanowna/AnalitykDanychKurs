I"½H<p>You need to deploy the <strong>Order Capture API</strong> application (<a href="https://hub.docker.com/r/azch/captureorder/">azch/captureorder</a>). This will require an external endpoint, exposing the API so that it can be accessed on port 80. The application will need to write to the MongoDB instance you deployed earlier.</p>

<h3 id="container-images-and-source-code">Container images and source code</h3>

<p>In the table below, you will find the Docker container images provided by the development team on Docker Hub as well as their corresponding source code on GitHub.</p>

<table>
  <thead>
    <tr>
      <th>Component</th>
      <th>Docker Image</th>
      <th>Source Code</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Order Capture API</td>
      <td><a href="https://hub.docker.com/r/azch/captureorder/">azch/captureorder</a></td>
      <td><a href="https://github.com/Azure/azch-captureorder">source-code</a></td>
    </tr>
  </tbody>
</table>

<h3 id="environment-variables">Environment variables</h3>

<p>The Order Capture API requires the following environment variables in order to connect to your MongoDB database. Make sure you set these environment variables in your deployment. You should use the Kubernetes secrets you created earlier to populate the values in the environment variables.</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">MONGOHOST="&lt;mongodb hostname&gt;"</code></li>
  <li><code class="language-plaintext highlighter-rouge">MONGOUSER="&lt;mongodb username&gt;"</code></li>
  <li><code class="language-plaintext highlighter-rouge">MONGOPASSWORD="&lt;mongodb password&gt;"</code></li>
</ul>

<blockquote>
  <p><strong>Hint:</strong> The Order Capture API exposes the following endpoint for health-checks once you have completed the tasks below: <code class="language-plaintext highlighter-rouge">http://[PublicEndpoint]:[port]/healthz</code></p>
</blockquote>

<h3 id="tasks">Tasks</h3>

<h4 id="deploy-the-captureorder-application">Deploy the <code class="language-plaintext highlighter-rouge">captureorder</code> application</h4>

<p><strong>Task Hints</strong></p>
<ul>
  <li>Read the Kubernetes docs in the resources section below for details on how to create a deployment. You should create a YAML file and use the <code class="language-plaintext highlighter-rouge">kubectl apply -f</code> command to deploy it to your cluster</li>
  <li>You provide environment variables to your container using the <code class="language-plaintext highlighter-rouge">env</code> key in your container spec. By using <code class="language-plaintext highlighter-rouge">valueFrom</code> and <code class="language-plaintext highlighter-rouge">secretRef</code> you can reference values stored in a Kubernetes secret (i.e. the one you created earlier with the MongoDB host, username and password)</li>
  <li>The container listens on port 8080</li>
  <li>If your pods are not starting, not ready or are crashing, you can view their logs and detailed status information using <code class="language-plaintext highlighter-rouge">kubectl logs &lt;pod name&gt;</code> and/or <code class="language-plaintext highlighter-rouge">kubectl describe pod &lt;pod name&gt;</code></li>
  <li>Advanced: You can define a <code class="language-plaintext highlighter-rouge">readinessProbe</code> and <code class="language-plaintext highlighter-rouge">livenessProbe</code> using the <code class="language-plaintext highlighter-rouge">/healthz</code> endpoint exposed by the container and the port <code class="language-plaintext highlighter-rouge">8080</code>, this is optional but considered to be a best practice</li>
  <li>Advanced: It is best practice to define <code class="language-plaintext highlighter-rouge">requests</code> and <code class="language-plaintext highlighter-rouge">limits</code> to control the CPU and memory utilisation of your containers</li>
</ul>

<!-- Begin collapsible container div -->
<div class="collapsible-content-container">
  <!-- Begin collapsible container button -->
  <button class="toggle-collapsible">Toggle solution</button>
  <!-- Begin collapsible container content div -->
  <div class="collapsible-content">
    <!-- Begin parsedText -->
    
<h5 id="deployment">Deployment</h5>

<p>Save the YAML below as <code class="language-plaintext highlighter-rouge">captureorder-deployment.yaml</code> or download it from <a href="yaml-solutions/01. challenge-02/captureorder-deployment.yaml">captureorder-deployment.yaml</a></p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">apiVersion</span><span class="pi">:</span> <span class="s">apps/v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">Deployment</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">captureorder</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">selector</span><span class="pi">:</span>
      <span class="na">matchLabels</span><span class="pi">:</span>
        <span class="na">app</span><span class="pi">:</span> <span class="s">captureorder</span>
  <span class="na">replicas</span><span class="pi">:</span> <span class="m">2</span>
  <span class="na">template</span><span class="pi">:</span>
      <span class="na">metadata</span><span class="pi">:</span>
        <span class="na">labels</span><span class="pi">:</span>
            <span class="na">app</span><span class="pi">:</span> <span class="s">captureorder</span>
      <span class="na">spec</span><span class="pi">:</span>
        <span class="na">containers</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">captureorder</span>
          <span class="na">image</span><span class="pi">:</span> <span class="s">azch/captureorder</span>
          <span class="na">imagePullPolicy</span><span class="pi">:</span> <span class="s">Always</span>
          <span class="na">readinessProbe</span><span class="pi">:</span>
            <span class="na">httpGet</span><span class="pi">:</span>
              <span class="na">port</span><span class="pi">:</span> <span class="m">8080</span>
              <span class="na">path</span><span class="pi">:</span> <span class="s">/healthz</span>
          <span class="na">livenessProbe</span><span class="pi">:</span>
            <span class="na">httpGet</span><span class="pi">:</span>
              <span class="na">port</span><span class="pi">:</span> <span class="m">8080</span>
              <span class="na">path</span><span class="pi">:</span> <span class="s">/healthz</span>
          <span class="na">resources</span><span class="pi">:</span>
            <span class="na">requests</span><span class="pi">:</span>
              <span class="na">memory</span><span class="pi">:</span> <span class="s2">"</span><span class="s">128Mi"</span>
              <span class="na">cpu</span><span class="pi">:</span> <span class="s2">"</span><span class="s">100m"</span>
            <span class="na">limits</span><span class="pi">:</span>
              <span class="na">memory</span><span class="pi">:</span> <span class="s2">"</span><span class="s">256Mi"</span>
              <span class="na">cpu</span><span class="pi">:</span> <span class="s2">"</span><span class="s">500m"</span>
          <span class="na">env</span><span class="pi">:</span>
          <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">MONGOHOST</span>
            <span class="na">valueFrom</span><span class="pi">:</span>
              <span class="na">secretKeyRef</span><span class="pi">:</span>
                <span class="na">name</span><span class="pi">:</span> <span class="s">mongodb</span>
                <span class="na">key</span><span class="pi">:</span> <span class="s">mongoHost</span>
          <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">MONGOUSER</span>
            <span class="na">valueFrom</span><span class="pi">:</span>
              <span class="na">secretKeyRef</span><span class="pi">:</span>
                <span class="na">name</span><span class="pi">:</span> <span class="s">mongodb</span>
                <span class="na">key</span><span class="pi">:</span> <span class="s">mongoUser</span>
          <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">MONGOPASSWORD</span>
            <span class="na">valueFrom</span><span class="pi">:</span>
              <span class="na">secretKeyRef</span><span class="pi">:</span>
                <span class="na">name</span><span class="pi">:</span> <span class="s">mongodb</span>
                <span class="na">key</span><span class="pi">:</span> <span class="s">mongoPassword</span>
          <span class="na">ports</span><span class="pi">:</span>
          <span class="pi">-</span> <span class="na">containerPort</span><span class="pi">:</span> <span class="m">8080</span>
</code></pre></div></div>

<p>And deploy it using</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl apply <span class="nt">-f</span> captureorder-deployment.yaml
</code></pre></div></div>

<h5 id="verify-that-the-pods-are-up-and-running">Verify that the pods are up and running</h5>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl get pods <span class="nt">-l</span> <span class="nv">app</span><span class="o">=</span>captureorder <span class="nt">-w</span>
</code></pre></div></div>

<p>Wait until you see pods are in the <code class="language-plaintext highlighter-rouge">Running</code> state.</p>

<blockquote>
  <p><strong>Hint</strong> If the pods are not starting, not ready or are crashing, you can view their logs and detailed status information using <code class="language-plaintext highlighter-rouge">kubectl logs &lt;pod name&gt;</code> and <code class="language-plaintext highlighter-rouge">kubectl describe pod &lt;pod name&gt;</code>.</p>
</blockquote>


    <!-- End parsedText -->
  </div>
  <!-- End collapsible container content div -->
</div>
<!-- End collapsible container div -->

<h4 id="expose-the-captureorder-deployment-with-a-service">Expose the <code class="language-plaintext highlighter-rouge">captureorder</code> deployment with a service</h4>

<p><strong>Task Hints</strong></p>
<ul>
  <li>Read the Kubernetes docs in the resources section below for details on how to create a service. You should create a YAML file and use the <code class="language-plaintext highlighter-rouge">kubectl apply -f</code> command to deploy it to your cluster</li>
  <li>Pay attention to the <code class="language-plaintext highlighter-rouge">port</code>, <code class="language-plaintext highlighter-rouge">targetPort</code> and the <code class="language-plaintext highlighter-rouge">selector</code></li>
  <li>Kubernetes has several types of services (described in the docs), specified in the <code class="language-plaintext highlighter-rouge">type</code> field. You will need to create a service of type <code class="language-plaintext highlighter-rouge">LoadBalancer</code></li>
  <li>The service should expose port 80</li>
</ul>

<!-- Begin collapsible container div -->
<div class="collapsible-content-container">
  <!-- Begin collapsible container button -->
  <button class="toggle-collapsible">Toggle solution</button>
  <!-- Begin collapsible container content div -->
  <div class="collapsible-content">
    <!-- Begin parsedText -->
    
<h5 id="service">Service</h5>

<p>Save the YAML below as <code class="language-plaintext highlighter-rouge">captureorder-service.yaml</code> or download it from <a href="yaml-solutions/01. challenge-02/captureorder-service.yaml">captureorder-service.yaml</a></p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">apiVersion</span><span class="pi">:</span> <span class="s">v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">Service</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">captureorder</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">selector</span><span class="pi">:</span>
    <span class="na">app</span><span class="pi">:</span> <span class="s">captureorder</span>
  <span class="na">ports</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">protocol</span><span class="pi">:</span> <span class="s">TCP</span>
    <span class="na">port</span><span class="pi">:</span> <span class="m">80</span>
    <span class="na">targetPort</span><span class="pi">:</span> <span class="m">8080</span>
  <span class="na">type</span><span class="pi">:</span> <span class="s">LoadBalancer</span>
</code></pre></div></div>

<p>And deploy it using</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl apply <span class="nt">-f</span> captureorder-service.yaml
</code></pre></div></div>

<h5 id="retrieve-the-external-ip-of-the-service">Retrieve the External-IP of the Service</h5>

<p>Use the command below. <strong>Make sure to allow a couple of minutes</strong> for the Azure Load Balancer to assign a public IP.</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl get service captureorder <span class="nt">-o</span> <span class="nv">jsonpath</span><span class="o">=</span><span class="s2">"{.status.loadBalancer.ingress[*].ip}"</span> <span class="nt">-w</span>
</code></pre></div></div>


    <!-- End parsedText -->
  </div>
  <!-- End collapsible container content div -->
</div>
<!-- End collapsible container div -->

<h4 id="ensure-orders-are-successfully-written-to-mongodb">Ensure orders are successfully written to MongoDB</h4>

<p><strong>Task Hints</strong></p>
<ul>
  <li>The IP of your service will be publicly available on the internet</li>
  <li>The service has a Swagger/OpenAPI definition: <code class="language-plaintext highlighter-rouge">http://[Your Service Public LoadBalancer IP]/swagger</code></li>
  <li>The service has an orders endpoint which accepts GET and POST: <code class="language-plaintext highlighter-rouge">http://[Your Service Public LoadBalancer IP]/v1/order</code></li>
  <li>Orders take the form <code class="language-plaintext highlighter-rouge">{"EmailAddress": "email@domain.com", "Product": "prod-1", "Total": 100}</code> (The values are not validated)</li>
</ul>

<!-- Begin collapsible container div -->
<div class="collapsible-content-container">
  <!-- Begin collapsible container button -->
  <button class="toggle-collapsible">Toggle solution</button>
  <!-- Begin collapsible container content div -->
  <div class="collapsible-content">
    <!-- Begin parsedText -->
    
<blockquote>
  <p><strong>Hint:</strong> You can test your deployed API with curl, the Order Capture APIâs Swagger endpoint or a tool such as <a href="https://www.getpostman.com/">Postman</a></p>
</blockquote>

<p>Send a <code class="language-plaintext highlighter-rouge">POST</code> request using curl</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl <span class="nt">-d</span> <span class="s1">'{"EmailAddress": "email@domain.com", "Product": "prod-1", "Total": 100}'</span> <span class="nt">-H</span> <span class="s2">"Content-Type: application/json"</span> <span class="nt">-X</span> POST http://[Your Service Public LoadBalancer IP]/v1/order
</code></pre></div></div>

<p>You can expect the order ID returned by API once your order has been written into Mongo DB successfully</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
    </span><span class="nl">"orderId"</span><span class="p">:</span><span class="w"> </span><span class="s2">"5beaa09a055ed200016e582f"</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>


    <!-- End parsedText -->
  </div>
  <!-- End collapsible container content div -->
</div>
<!-- End collapsible container div -->

<blockquote>
  <p><strong>Hint:</strong> In the sample solution, we have specified readinessProbe and livenessProbe settings in the YAML file when weâre deploying The Order Capture API. In Kubernetes, readiness probes define when a Container is ready to start accepting traffic, liveness probes monitor the container health. Hence here we can use the following endpoint to do a simple health-checks : <code class="language-plaintext highlighter-rouge">http://[PublicEndpoint]:[port]/healthz</code></p>
</blockquote>

<blockquote>
  <p><strong>Resources</strong></p>
  <ul>
    <li><a href="https://kubernetes.io/docs/concepts/workloads/controllers/deployment/">https://kubernetes.io/docs/concepts/workloads/controllers/deployment/</a></li>
    <li><a href="https://kubernetes.io/docs/tasks/inject-data-application/define-environment-variable-container/">https://kubernetes.io/docs/tasks/inject-data-application/define-environment-variable-container/</a></li>
    <li><a href="https://kubernetes.io/docs/tasks/inject-data-application/distribute-credentials-secure/#define-container-environment-variables-using-secret-data">https://kubernetes.io/docs/tasks/inject-data-application/distribute-credentials-secure/#define-container-environment-variables-using-secret-data</a></li>
    <li><a href="https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/">https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/</a></li>
    <li><a href="https://kubernetes.io/docs/concepts/services-networking/service/">https://kubernetes.io/docs/concepts/services-networking/service/</a></li>
    <li><a href="https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/#configuration-file">https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/#configuration-file</a></li>
  </ul>
</blockquote>

<h3 id="architecture-diagram">Architecture Diagram</h3>
<p>Hereâs a high level diagram of the components you will have deployed when youâve finished this section (click the picture to enlarge)</p>

<p><a href="media/architecture/captureorder.png" target="_blank"><img src="media/architecture/captureorder.png" style="width:500px" /></a></p>
:ET