I"H'<p>You need to deploy MongoDB in a way that is scalable and production ready.</p>

<p><strong>Task Hints</strong></p>
<ul>
  <li>Use Helm and a standard provided Helm chart to deploy MongoDB.</li>
  <li>Be careful with the authentication settings when creating MongoDB. It is recommended that you create a standalone username/password. The username and password can be anything you like, but make a note of them for the next task.</li>
</ul>

<blockquote>
  <p><strong>Important</strong>: If you install using Helm and then delete the release, the MongoDB data and configuration persists in a Persistent Volume Claim. You may face issues if you redeploy again using the same release name because the authentication configuration will not match. If you need to delete the Helm deployment and start over, make sure you delete the Persistent Volume Claims created otherwise you’ll run into issues with authentication due to stale configuration. Find those claims using <code class="language-plaintext highlighter-rouge">kubectl get pvc</code>.</p>
</blockquote>

<h3 id="tasks">Tasks</h3>

<h4 id="setup-helm">Setup Helm</h4>

<p>Helm is an application package manager for Kubernetes, and a way to easily deploy applications and services into Kubernetes, via what are called charts. To use Helm you will need the <code class="language-plaintext highlighter-rouge">helm</code> command (This is already installed if you’re using the Azure Cloud Shell).</p>

<p><strong>Task Hints</strong></p>
<ul>
  <li>These instructions use <a href="https://helm.sh/blog/helm-3-released/">Helm version 3</a>.</li>
  <li>Helm version 3 does not come with any repositories predefined, so you’ll need initialize the <a href="https://v3.helm.sh/docs/intro/quickstart/#initialize-a-helm-chart-repository">stable chart repository</a></li>
</ul>

<!-- Begin collapsible container div -->
<div class="collapsible-content-container">
  <!-- Begin collapsible container button -->
  <button class="toggle-collapsible">Toggle solution</button>
  <!-- Begin collapsible container content div -->
  <div class="collapsible-content">
    <!-- Begin parsedText -->
    
<p>Add the <code class="language-plaintext highlighter-rouge">stable</code> Helm charts repository
<code class="language-plaintext highlighter-rouge">helm repo add stable https://kubernetes-charts.storage.googleapis.com/</code></p>

<p>Upate the repositories
<code class="language-plaintext highlighter-rouge">helm repo update</code></p>


    <!-- End parsedText -->
  </div>
  <!-- End collapsible container content div -->
</div>
<!-- End collapsible container div -->

<h4 id="deploy-an-instance-of-mongodb-to-your-cluster">Deploy an instance of MongoDB to your cluster</h4>

<p>A standard repository of Helm charts is available for many different software packages, and it has one for <a href="https://github.com/helm/charts/tree/master/stable/mongodb">MongoDB</a> that is easily replicated and horizontally scalable.</p>

<p><strong>Task Hints</strong></p>
<ul>
  <li>When installing a chart, Helm uses a concept called a “release” and each release needs a name. We recommend you name your release <code class="language-plaintext highlighter-rouge">orders-mongo</code> to make it easier to follow later steps in this workshop</li>
  <li>When deploying a chart you provide parameters with the <code class="language-plaintext highlighter-rouge">--set</code> switch and a comma separated list of <code class="language-plaintext highlighter-rouge">key=value</code> pairs. There are MANY parameters you can provide to the MongoDB chart, but pay attention to the <code class="language-plaintext highlighter-rouge">mongodbUsername</code>, <code class="language-plaintext highlighter-rouge">mongodbPassword</code> and <code class="language-plaintext highlighter-rouge">mongodbDatabase</code> parameters</li>
</ul>

<blockquote>
  <p><strong>Note</strong> The application expects a database named <code class="language-plaintext highlighter-rouge">akschallenge</code>. Using a different database name will cause the application to fail!</p>
</blockquote>

<!-- Begin collapsible container div -->
<div class="collapsible-content-container">
  <!-- Begin collapsible container button -->
  <button class="toggle-collapsible">Toggle solution</button>
  <!-- Begin collapsible container content div -->
  <div class="collapsible-content">
    <!-- Begin parsedText -->
    
<p>The recommended way to deploy MongoDB would be to use a Helm Chart.</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>helm <span class="nb">install </span>orders-mongo stable/mongodb <span class="nt">--set</span> <span class="nv">mongodbUsername</span><span class="o">=</span>orders-user,mongodbPassword<span class="o">=</span>orders-password,mongodbDatabase<span class="o">=</span>akschallenge
</code></pre></div></div>

<blockquote>
  <p><strong>Hint</strong> Using this command, the Helm Chart will expose the MongoDB instance as a Kubernetes Service accessible at <code class="language-plaintext highlighter-rouge">orders-mongo-mongodb.default.svc.cluster.local</code></p>
</blockquote>

<p>Remember to use the username and password from the command above when creating the Kubernetes secrets in the next step.</p>


    <!-- End parsedText -->
  </div>
  <!-- End collapsible container content div -->
</div>
<!-- End collapsible container div -->

<h4 id="create-a-kubernetes-secret-to-hold-the-mongodb-details">Create a Kubernetes secret to hold the MongoDB details</h4>

<p>In the previous step, you installed MongoDB using Helm, with a specified username, password and a hostname where the database is accessible. You’ll now create a Kubernetes secret called <code class="language-plaintext highlighter-rouge">mongodb</code> to hold those details, so that you don’t need to hard-code them in the YAML files.</p>

<p><strong>Task Hints</strong></p>
<ul>
  <li>A Kubernetes secret can hold several items, indexed by key. The name of the secret isn’t critical, but you’ll need three keys to store your secret data:
    <ul>
      <li><code class="language-plaintext highlighter-rouge">mongoHost</code></li>
      <li><code class="language-plaintext highlighter-rouge">mongoUser</code></li>
      <li><code class="language-plaintext highlighter-rouge">mongoPassword</code></li>
    </ul>
  </li>
  <li>The values for the username &amp; password will be those you used with the <code class="language-plaintext highlighter-rouge">helm install</code> command when deploying MongoDB.</li>
  <li>Run <code class="language-plaintext highlighter-rouge">kubectl create secret generic -h</code> for help on how to create a secret, clue: use the <code class="language-plaintext highlighter-rouge">--from-literal</code> parameter to allow you to provide the secret values directly on the command in plain text.</li>
  <li>The value of <code class="language-plaintext highlighter-rouge">mongoHost</code>, will be dependent on the name of the MongoDB service. The service was created by the Helm chart and will start with the release name you gave. Run <code class="language-plaintext highlighter-rouge">kubectl get service</code> and you should see it listed, e.g. <code class="language-plaintext highlighter-rouge">orders-mongo-mongodb</code></li>
  <li>All services in Kubernetes get DNS names, this is assigned automatically by Kubernetes, there’s no need for you to configure it. You can use the short form which is simply the service name, e.g. <code class="language-plaintext highlighter-rouge">orders-mongo-mongodb</code> or better to use the “fully qualified” form <code class="language-plaintext highlighter-rouge">orders-mongo-mongodb.default.svc.cluster.local</code></li>
</ul>

<!-- Begin collapsible container div -->
<div class="collapsible-content-container">
  <!-- Begin collapsible container button -->
  <button class="toggle-collapsible">Toggle solution</button>
  <!-- Begin collapsible container content div -->
  <div class="collapsible-content">
    <!-- Begin parsedText -->
    
<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl create secret generic mongodb <span class="nt">--from-literal</span><span class="o">=</span><span class="nv">mongoHost</span><span class="o">=</span><span class="s2">"orders-mongo-mongodb.default.svc.cluster.local"</span> <span class="nt">--from-literal</span><span class="o">=</span><span class="nv">mongoUser</span><span class="o">=</span><span class="s2">"orders-user"</span> <span class="nt">--from-literal</span><span class="o">=</span><span class="nv">mongoPassword</span><span class="o">=</span><span class="s2">"orders-password"</span>
</code></pre></div></div>

<p>You’ll need to reference this secret when configuring the Order Capture application later on.</p>


    <!-- End parsedText -->
  </div>
  <!-- End collapsible container content div -->
</div>
<!-- End collapsible container div -->

<blockquote>
  <p><strong>Resources</strong></p>
  <ul>
    <li><a href="https://helm.sh/docs/intro/using_helm/">https://helm.sh/docs/intro/using_helm/</a></li>
    <li><a href="https://github.com/helm/charts/tree/master/stable/mongodb">https://github.com/helm/charts/tree/master/stable/mongodb</a></li>
    <li><a href="https://kubernetes.io/docs/concepts/configuration/secret/">https://kubernetes.io/docs/concepts/configuration/secret/</a></li>
  </ul>
</blockquote>

<h3 id="architecture-diagram">Architecture Diagram</h3>
<p>Here’s a high level diagram of the components you will have deployed when you’ve finished this section (click the picture to enlarge)</p>

<p><a href="media/architecture/mongo.png" target="_blank"><img src="media/architecture/mongo.png" style="width:500px" /></a></p>

<ul>
  <li>The <strong>pod</strong> holds the containers that run MongoDB</li>
  <li>The <strong>deployment</strong> manages the pod</li>
  <li>The <strong>service</strong> exposes the pod to the Internet using a public IP address and a specified port</li>
</ul>
:ET